
type Prompts {
  id: ID!
  data: [Prompt]!
  category: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Prompt {
  prompt: String!
  answer: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input PromptInput {
  prompt: String!
  answer: String!
}

type ModelPromptsConnection {
  items: [Prompts]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPromptsFilterInput {
  id: ModelIDInput
  category: ModelIntInput
  and: [ModelPromptsFilterInput]
  or: [ModelPromptsFilterInput]
  not: ModelPromptsFilterInput
}

type Query {
  getPrompts(id: ID!): Prompts
  listPrompts(filter: ModelPromptsFilterInput, limit: Int, nextToken: String): ModelPromptsConnection
  syncPrompts(filter: ModelPromptsFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPromptsConnection
}

input ModelPromptsConditionInput {
  category: ModelIntInput
  and: [ModelPromptsConditionInput]
  or: [ModelPromptsConditionInput]
  not: ModelPromptsConditionInput
}

input CreatePromptsInput {
  id: ID
  data: [PromptInput]!
  category: Int!
  _version: Int
}

input UpdatePromptsInput {
  id: ID!
  data: [PromptInput]
  category: Int
  _version: Int
}

input DeletePromptsInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPrompts(input: CreatePromptsInput!, condition: ModelPromptsConditionInput): Prompts
  updatePrompts(input: UpdatePromptsInput!, condition: ModelPromptsConditionInput): Prompts
  deletePrompts(input: DeletePromptsInput!, condition: ModelPromptsConditionInput): Prompts
}

input ModelSubscriptionPromptsFilterInput {
  id: ModelSubscriptionIDInput
  category: ModelSubscriptionIntInput
  and: [ModelSubscriptionPromptsFilterInput]
  or: [ModelSubscriptionPromptsFilterInput]
}

type Subscription {
  onCreatePrompts(filter: ModelSubscriptionPromptsFilterInput): Prompts @aws_subscribe(mutations: ["createPrompts"])
  onUpdatePrompts(filter: ModelSubscriptionPromptsFilterInput): Prompts @aws_subscribe(mutations: ["updatePrompts"])
  onDeletePrompts(filter: ModelSubscriptionPromptsFilterInput): Prompts @aws_subscribe(mutations: ["deletePrompts"])
}

